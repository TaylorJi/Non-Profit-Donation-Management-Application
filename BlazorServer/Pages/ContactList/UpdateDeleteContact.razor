@page "/getContactList/updel/{id}/{mode}"
@using BlazorServer.Data
@using DonationLibrary.Models
@inject ContactListService contactListService
@inject NavigationManager NavManager

<PageTitle>Update/Delete Contact</PageTitle>

@if (contact != null && Mode == "edit") // Update
{
    <p>Update Contact with ID == @Id</p>
    <EditForm Model="@contact" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="FirstName">First Name:</label>
            <InputText id="FirstName" class="form-control" @bind-Value="contact.FirstName" />
        </div>
        <div class="form-group">
            <label for="LastName">Last Name:</label>
            <InputText id="LastName" class="form-control" @bind-Value="contact.LastName" />
        </div>
        <div class="form-group">
            <label for="School">Email:</label>
            <InputText id="School" class="form-control" @bind-Value="contact.Email" />
        </div>
        <div class="form-group">
            <label for="School">Street:</label>
            <InputText id="School" class="form-control" @bind-Value="contact.Street" />
        </div>
        <div class="form-group">
            <label for="School">City:</label>
            <InputText id="School" class="form-control" @bind-Value="contact.City" />
        </div>
        <div class="form-group">
            <label for="School">Postal Code:</label>
            <InputText id="School" class="form-control" @bind-Value="contact.PostalCode" />
        </div>
        <div class="form-group">
            <label for="School">Country:</label>
            <InputText id="School" class="form-control" @bind-Value="contact.Country" />
        </div>
        <button type="submit" class="btn btn-primary">Update</button>
    </EditForm>

    @code {
        private async Task HandleValidSubmit()
        {
            await contactListService.UpdateContactAsync(contact!.AccountNo, contact);
            NavManager.NavigateTo("/getContactList");
        }
    }
}
else if (contact != null && Mode == "del")
{ // Delete
    // display Contact details
    <fieldset>
        <legend>Contact Information</legend>
        <p>Contact ID: @Id</p>
        <p>First Name: @contact.FirstName</p>
        <p>Last Name: @contact.LastName</p>
        <p>Email: @contact.Email</p>
        <p>Street: @contact.Street</p>
        <p>City: @contact.City</p>
        <p>Postal Code: @contact.PostalCode</p>
        <p>Country: @contact.Country</p>
    </fieldset>
    <p>Delete Contact with ID == @Id</p>
    <p>Are you sure?</p>
    <button type="button" class="btn btn-danger" @onclick="HandleDeleteContact">Delete</button>
    @code {
        private async Task HandleDeleteContact()
        {
            await contactListService.DeleteContactAsync(contact!.AccountNo);
            NavManager.NavigateTo("/getContactList");
        }
    }
}
else
{
    <p>Contact with ID == @Id not found</p>
}
@code {
    [Parameter]
    public string? Id { get; set; }
    [Parameter]
    public string? Mode { get; set; }
    private ContactList? contact = new ContactList();
    protected override async Task OnInitializedAsync()
    {
        int intId = Convert.ToInt32(Id);
        contact = await contactListService.GetContactListByIdAsync(intId);
    }
}